{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red23\green23\blue23;\red202\green202\blue202;
\red89\green138\blue67;\red140\green211\blue254;\red167\green197\blue152;\red194\green126\blue101;\red70\green137\blue204;
\red212\green214\blue154;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c41569\c60000\c33333;\cssrgb\c61176\c86275\c99608;\cssrgb\c70980\c80784\c65882;\cssrgb\c80784\c56863\c47059;\cssrgb\c33725\c61176\c83922;
\cssrgb\c86275\c86275\c66667;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  requests, json, pprint, re, inquirer, os \cf5 \strokec5 #modules\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 pp = pprint.PrettyPrinter(\cf6 \strokec6 indent\cf4 \strokec4 =\cf7 \strokec7 4\cf4 \strokec4 ) \cf5 \strokec5 # makes the output better\cf4 \cb1 \strokec4 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 \strokec5 # Get env veriable\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 TOKEN = os.getenv(\cf8 \strokec8 'TOKEN'\cf4 \strokec4 ) \cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb3 \strokec9 def\cf4 \strokec4  \cf10 \strokec10 droplet_payload\cf4 \strokec4 ():\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     question_name = [\cb1 \
\cb3         inquirer.Text(\cf6 \strokec6 name\cf4 \strokec4 =\cf8 \strokec8 "name"\cf4 \strokec4 , \cf6 \strokec6 message\cf4 \strokec4 =\cf8 \strokec8 "Droplet name?,"\cf4 \strokec4 )\cb1 \
\cb3     ]\cb1 \
\cb3     answer_name = inquirer.prompt(question_name)\cb1 \
\cb3     \cf10 \strokec10 print\cf4 \strokec4 ()\cb1 \
\cb3     question_region = [\cb1 \
\cb3         inquirer.List(\cf8 \strokec8 "region"\cf4 \strokec4 ,\cb1 \
\cb3         \cf6 \strokec6 message\cf4 \strokec4 =\cf8 \strokec8 "Which Region?"\cf4 \strokec4 ,\cb1 \
\cb3         \cf6 \strokec6 choices\cf4 \strokec4 =[droplet_regions()]\cf5 \strokec5 #'nyc3', 'nyc1', 'sfo1', 'nyc2', 'ams2', 'sgp1', 'lon1', 'ams3', 'fra1', 'tor1', 'sfo2', 'blr1', 'sfo3']\cf4 \cb1 \strokec4 \
\cb3         ),\cb1 \
\cb3     ]\cb1 \
\cb3     answer_region = inquirer.prompt(question_region)\cb1 \
\cb3     \cf10 \strokec10 print\cf4 \strokec4 (answer_region)\cb1 \
\cb3     Size = question_size = [    \cb1 \
\cb3         inquirer.List(\cf8 \strokec8 "size"\cf4 \strokec4 , \cb1 \
\cb3         \cf6 \strokec6 message\cf4 \strokec4 =\cf8 \strokec8 "What size?"\cf4 \strokec4 ,\cb1 \
\cb3         \cf6 \strokec6 choices\cf4 \strokec4 =[\cf8 \strokec8 's-1vcpu-1gb'\cf4 \strokec4 , \cf8 \strokec8 's-1vcpu-1gb-amd'\cf4 \strokec4 , \cf8 \strokec8 's-1vcpu-1gb-intel'\cf4 \strokec4 , \cf8 \strokec8 's-1vcpu-2gb'\cf4 \strokec4 , \cf8 \strokec8 's-1vcpu-2gb-amd'\cf4 \strokec4 , \cf8 \strokec8 's-1vcpu-2gb-intel'\cf4 \strokec4 ,]\cb1 \
\cb3         ),\cb1 \
\cb3     ]\cb1 \
\cb3     answer_size = inquirer.prompt(question_size)\cb1 \
\cb3     Image = question_image = [    \cb1 \
\cb3         inquirer.List(\cf8 \strokec8 "image"\cf4 \strokec4 ,\cb1 \
\cb3         \cf6 \strokec6 message\cf4 \strokec4 =\cf8 \strokec8 "Which image?"\cf4 \strokec4 ,\cb1 \
\cb3         \cf6 \strokec6 choices\cf4 \strokec4 =[\cf8 \strokec8 "CentOS-7-x64"\cf4 \strokec4 ,\cf8 \strokec8 "Debian-10-x64"\cf4 \strokec4 ,\cf8 \strokec8 "ubuntu-18.04-x64"\cf4 \strokec4 ,\cf8 \strokec8 "Fedora-35-x64"\cf4 \strokec4 ,\cf8 \strokec8 "RancherO`S-1.58-x64"\cf4 \strokec4 ,\cf8 \strokec8 "RockyLinux-8.5-x64"\cf4 \strokec4 ]\cb1 \
\cb3         ),\cb1 \
\cb3     ]\cb1 \
\cb3     answer_image = inquirer.prompt(question_image)\cb1 \
\
\cb3     payload = \{\cb1 \
\cb3         \cf8 \strokec8 "name"\cf4 \strokec4 : answer_name[\cf8 \strokec8 'name'\cf4 \strokec4 ],\cb1 \
\cb3         \cf8 \strokec8 "region"\cf4 \strokec4 : answer_region[\cf8 \strokec8 'region'\cf4 \strokec4 ],\cb1 \
\cb3         \cf8 \strokec8 "size"\cf4 \strokec4 : answer_size[\cf8 \strokec8 'size'\cf4 \strokec4 ],\cb1 \
\cb3         \cf8 \strokec8 "image"\cf4 \strokec4 : answer_image[\cf8 \strokec8 'image'\cf4 \strokec4 ],\cb1 \
\cb3         \cf8 \strokec8 "ssh_keys"\cf4 \strokec4 : [\cb1 \
\cb3             \cf7 \strokec7 35624875\cf4 \strokec4  \cf5 \strokec5 # enter your own ssh key id\cf4 \cb1 \strokec4 \
\cb3         ]\cb1 \
\cb3     \}\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  payload\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb3 \strokec9 def\cf4 \strokec4  \cf10 \strokec10 create_droplet\cf4 \strokec4 (\cf6 \strokec6 token\cf4 \strokec4 , \cf6 \strokec6 payload\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     header = \{\cb1 \
\cb3         \cf8 \strokec8 "Authorization"\cf4 \strokec4 : \cf8 \strokec8 "Bearer \cf9 \strokec9 %s\cf8 \strokec8 "\cf4 \strokec4  % TOKEN \cb1 \
\cb3         \}\cb1 \
\cb3     r = requests.post(\cf8 \strokec8 'https://api.digitalocean.com/v2/droplets'\cf4 \strokec4 , \cf6 \strokec6 data\cf4 \strokec4 =payload, \cf6 \strokec6 headers\cf4 \strokec4 =header)\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  r.json()\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb3 \strokec9 def\cf4 \strokec4  \cf10 \strokec10 get_droplet\cf4 \strokec4 (\cf6 \strokec6 token\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     header = \{\cb1 \
\cb3         \cf8 \strokec8 "Authorization"\cf4 \strokec4 : \cf8 \strokec8 "Bearer \cf9 \strokec9 %s\cf8 \strokec8 "\cf4 \strokec4  % token \cb1 \
\cb3     \}\cb1 \
\cb3     r = requests.get(\cf8 \strokec8 'https://api.digitalocean.com/v2/droplets'\cf4 \strokec4 , \cf6 \strokec6 headers\cf4 \strokec4 =header)\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  r.json()\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb3 \strokec9 def\cf4 \strokec4  \cf10 \strokec10 delete_droplet\cf4 \strokec4 (\cf6 \strokec6 token\cf4 \strokec4 , \cf6 \strokec6 name\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     droplets = get_droplet(\cf6 \strokec6 token\cf4 \strokec4 =token)\cb1 \
\cb3     header = \{\cf8 \strokec8 "Authorization"\cf4 \strokec4 : \cf8 \strokec8 "Bearer \cf9 \strokec9 %s\cf8 \strokec8 "\cf4 \strokec4  % token\}\cb1 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  droplet \cf2 \strokec2 in\cf4 \strokec4  droplets[\cf8 \strokec8 'droplets'\cf4 \strokec4 ]:\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  droplet[\cf8 \strokec8 'name'\cf4 \strokec4 ] == name:\cb1 \
\cb3             response = requests.delete(\cf8 \strokec8 'https://api.digitalocean.com/v2/droplets/\cf9 \strokec9 %s\cf8 \strokec8 '\cf4 \strokec4  % droplet[\cf8 \strokec8 'id'\cf4 \strokec4 ], \cf6 \strokec6 headers\cf4 \strokec4 =header)\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  response\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb3 \strokec9 def\cf4 \strokec4  \cf10 \strokec10 get_key\cf4 \strokec4 (\cf6 \strokec6 token\cf4 \strokec4 , \cf6 \strokec6 name\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     key_names = []\cb1 \
\cb3     header = \{\cf8 \strokec8 "Authorization"\cf4 \strokec4 : \cf8 \strokec8 "Bearer \cf9 \strokec9 %s\cf8 \strokec8 "\cf4 \strokec4  % token\}\cb1 \
\cb3     s = requests.get(\cf8 \strokec8 'https://api.digitalocean.com/v2/account/keys'\cf4 \strokec4 , \cf6 \strokec6 headers\cf4 \strokec4 =header)\cb1 \
\cb3     keys = s.json()\cb1 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  key \cf2 \strokec2 in\cf4 \strokec4  keys[\cf8 \strokec8 'ssh_keys'\cf4 \strokec4 ]:\cb1 \
\cb3         key_names.append(key[\cf8 \strokec8 'name'\cf4 \strokec4 ])\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  name \cf9 \strokec9 in\cf4 \strokec4  key_names:\cb1 \
\cb3         \cf10 \strokec10 print\cf4 \strokec4 (name + \cf8 \strokec8 ' exists in DO acount'\cf4 \strokec4 )\cb1 \
\cb3     \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3         \cf10 \strokec10 print\cf4 \strokec4 (name + \cf8 \strokec8 ' key not found'\cf4 \strokec4 )\cb1 \
\
\cb3  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb3 \strokec9 def\cf4 \strokec4  \cf10 \strokec10 new_key\cf4 \strokec4 (\cf6 \strokec6 token\cf4 \strokec4 , \cf6 \strokec6 public_key\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     header = \{\cf8 \strokec8 "Content-type"\cf4 \strokec4 : \cf8 \strokec8 "application/json"\cf4 \strokec4 , \cf8 \strokec8 "Authorization"\cf4 \strokec4 : \cf8 \strokec8 "Bearer \cf9 \strokec9 %s\cf8 \strokec8 "\cf4 \strokec4  % TOKEN\}\cb1 \
\cb3     info = \{\cb1 \
\cb3         \cf8 \strokec8 "public_key"\cf4 \strokec4 :\cf8 \strokec8 "public_key"\cf4 \strokec4 ,\cf8 \strokec8 "name"\cf4 \strokec4 : \cf8 \strokec8 "My_SSH_Public_Key"\cf4 \cb1 \strokec4 \
\cb3         \}\cb1 \
\cb3     w = requests.post(\cf8 \strokec8 'https://api.digitalocean.com/v2/account/keys'\cf4 \strokec4 , \cf6 \strokec6 headers\cf4 \strokec4 =header, \cf6 \strokec6 data\cf4 \strokec4 =info)\cb1 \
\cb3     \cf10 \strokec10 print\cf4 \strokec4 (w.status_code)\cb1 \
\cb3     \cf10 \strokec10 print\cf4 \strokec4 (w.text)\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb3 \strokec9 def\cf4 \strokec4  \cf10 \strokec10 droplet_sizes\cf4 \strokec4 ():\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     header = \{\cf8 \strokec8 "Content-type"\cf4 \strokec4 : \cf8 \strokec8 "application/json"\cf4 \strokec4 , \cf8 \strokec8 "Authorization"\cf4 \strokec4 : \cf8 \strokec8 "Bearer \cf9 \strokec9 %s\cf8 \strokec8 "\cf4 \strokec4  % TOKEN\}\cb1 \
\cb3     get = requests.get(\cf8 \strokec8 'https://api.digitalocean.com/v2/sizes'\cf4 \strokec4 , \cf6 \strokec6 headers\cf4 \strokec4 =header)\cb1 \
\cb3     regions = get.json()\cb1 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  region \cf2 \strokec2 in\cf4 \strokec4  regions[\cf8 \strokec8 'sizes'\cf4 \strokec4 ]:\cb1 \
\cb3         \cf10 \strokec10 print\cf4 \strokec4 (region)\cb1 \
\
\cb3     \cf5 \strokec5 # return get.json()\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb3 \strokec5 # droplet_sizes()\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb3 \strokec9 def\cf4 \strokec4  \cf10 \strokec10 droplet_regions\cf4 \strokec4 ():\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3     header = \{\cf8 \strokec8 "Content-type"\cf4 \strokec4 : \cf8 \strokec8 "application/json"\cf4 \strokec4 , \cf8 \strokec8 "Authorization"\cf4 \strokec4 : \cf8 \strokec8 "Bearer \cf9 \strokec9 %s\cf8 \strokec8 "\cf4 \strokec4  % TOKEN\}\cb1 \
\cb3     get = requests.get(\cf8 \strokec8 'https://api.digitalocean.com/v2/regions'\cf4 \strokec4 , \cf6 \strokec6 headers\cf4 \strokec4 =header)\cb1 \
\cb3     regions = get.json()\cb1 \
\cb3     \cf5 \strokec5 # pp.pprint(regions)\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  region \cf2 \strokec2 in\cf4 \strokec4  regions[\cf8 \strokec8 'regions'\cf4 \strokec4 ]:\cb1 \
\cb3         \cf10 \strokec10 print\cf4 \strokec4 (region[\cf8 \strokec8 'slug'\cf4 \strokec4 ] + \cf8 \strokec8 '   '\cf4 \strokec4  +  region[\cf8 \strokec8 'name'\cf4 \strokec4 ])\cb1 \
\
\cb3     \cf5 \strokec5 # return get.json()\cf4 \cb1 \strokec4 \
\
\cb3 droplet_payload()\cb1 \
}